(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{351:function(e,a,t){"use strict";t.r(a);var s=t(43),l=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[t("code",[e._v("lage")]),e._v(" is meant to be run as a CLI. After installing "),t("code",[e._v("lage")]),e._v(" inside the repository or globally, you can run the npm scripts from your repository like this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ lage build\n")])])]),t("h2",{attrs:{id:"scoped-builds"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scoped-builds"}},[e._v("#")]),e._v(" Scoped builds")]),e._v(" "),t("p",[e._v("Scoping a task runner can speed up the process especially if there are distinct clusters of packages that are not related to each other within the repository. "),t("code",[e._v("lage")]),e._v(" has a "),t("code",[e._v("scope")]),e._v(" option that allows the task running to proceed up to the packages found that matches the "),t("code",[e._v("scope")]),e._v(" argument. This is a string matcher based on the name of the packages (not the package path).")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ lage build --scope *build-tools*\n")])])]),t("p",[e._v("This will run the tasks needed to satisfy the "),t("code",[e._v("build")]),e._v(" script of all the packages that has the "),t("code",[e._v("build-tools")]),e._v(" string in their names. Think of this as running tasks up and including the package matched in the scope.")]),e._v(" "),t("h2",{attrs:{id:"scoped-builds-with-dependencies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scoped-builds-with-dependencies"}},[e._v("#")]),e._v(" Scoped builds with dependencies")]),e._v(" "),t("p",[e._v("Sometimes, it is helpful to be able to run tasks on all affected packages within a scope. Packages that changed will affect downstream consumers. In this case, pass a "),t("code",[e._v("deps")]),e._v(" argument along with the "),t("code",[e._v("scope")]),e._v(" to build all the dependencies as well.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ lage build --scope *build-tools* --deps\n")])])]),t("h2",{attrs:{id:"caching"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#caching"}},[e._v("#")]),e._v(" Caching")]),e._v(" "),t("p",[t("code",[e._v("lage")]),e._v(" by default will skip tasks that it has already done recently. As long as the source file and the command called to "),t("code",[e._v("lage")]),e._v(" has not changed, those packages will be skipped. Sometimes, this incremental behavior is not desired. You can override the caching behavior by using the "),t("code",[e._v("no-cache")]),e._v(" argument.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ lage build --no-cache\n")])])]),t("h2",{attrs:{id:"verbose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verbose"}},[e._v("#")]),e._v(" Verbose")]),e._v(" "),t("p",[t("code",[e._v("lage")]),e._v(" by default will hide the output from successful tasks. If you want to see the output as they are being generated, call "),t("code",[e._v("lage")]),e._v(" with the "),t("code",[e._v("verbose")]),e._v(" argument.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ lage build --verbose\n")])])])])}),[],!1,null,null,null);a.default=l.exports}}]);