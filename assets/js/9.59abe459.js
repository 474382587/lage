(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{356:function(e,t,a){"use strict";a.r(t);var r=a(25),n=function(e){e.options.__data__block__={mermaid_1a96284d:"graph TD\n  FooCore --\x3e BuildTool\n\tBarCore --\x3e BuildTool\n\tFooApp1 --\x3e FooCore\n\tFooApp2 --\x3e FooCore\n\tBarPage --\x3e BarCore\n",mermaid_382ee146:"gantt\n\ttitle Level 1: Typical Lerna or Workspace Runners\n\tdateFormat  s\n  axisFormat  %S\n\nsection Lerna\n\nprepare: active, lerna_prepare, 0, 30s\nbuild : active, lerna_build, after lerna_prepare, 50s\ntest : active, lerna_test, after lerna_build, 25s\n\n    section BuildTool\n\n    prepare: bt_prepare, 0, 10s\n    build  : bt_build, after lerna_prepare, 10s\n    test   : bt_test, after lerna_build, 6s\n\n    section FooCore\n\n    prepare: fc_prepare, after bt_prepare, 10s\n    build: fc_build, after bt_build, 15s\n    test: fc_test, after lerna_build, 25s\n\nsection FooApp1\n\n    prepare: fa1_prepare, after fc_prepare, 10s\n    build: fa1_build, after fc_build, 25s\n    test: fa1_test, after lerna_build, 15s\n\nsection FooApp2\n\n    prepare: fa2_prepare, after fc_prepare, 10s\n    build: fa2_build, after fc_build, 12s\n    test: fa2_test, after lerna_build, 8s\n\nsection BarCore\n\n    prepare: bc_prepare, after bt_prepare, 10s\n    build: bc_build, after bt_build, 10s\n    test: bc_test, after lerna_build, 16s\n\nsection BarPage\n\n    prepare: bp_prepare, after bc_prepare, 10s\n    build: bp_build, after bc_build, 25s\n    test: bp_test, after lerna_build, 12s\n",mermaid_382ee14e:"gantt\n\ttitle Level 2: Scoping\n\tdateFormat  s\n  axisFormat  %S\n\n  section Lerna\n\tLevel 1: 0, 105s\n  prepare: active, lerna_prepare, 0, 30s\n\tbuild  : active, lerna_build, after lerna_prepare, 45s\n  test  : active, lerna_test, after lerna_build, 16s\n\n\n\tsection BuildTool\n\tprepare: bt_prepare, 0, 10s\n\tbuild  : bt_build, after lerna_prepare, 10s\n\ttest   : bt_test, after lerna_build, 6s\n\n\tsection FooCore\n\tskipped: 0\n\n  section FooApp1\n\tskipped: 0\n\n  section FooApp2\n\tskipped: 0\n\n  section BarCore *\n\tprepare: bc_prepare, after bt_prepare, 10s\n\tbuild: bc_build, after bt_build, 10s\n\ttest: bc_test, after lerna_build, 16s\n\n  section BarPage\n\tprepare: bp_prepare, after bc_prepare, 10s\n\tbuild: bp_build, after bc_build, 25s\n\ttest: bp_test, after lerna_build, 12s\n",mermaid_382ee16a:"gantt\n\ttitle Level 3: Caching\n\tdateFormat  s\n  axisFormat  %S\n\n  section Lerna\n\tLevel 1: 0, 105s\n\tLevel 2: 0, 91s\n  prepare: active, lerna_prepare, 0, 30s\n\tbuild  : active, lerna_build, after lerna_prepare, 37s\n  test  : active, lerna_test, after lerna_build, 12s\n\n\tsection BuildTool\n\tprepare: bt_prepare, 0, 10s\n\tbuild  : bt_build, after lerna_prepare, 10s\n\ttest   : bt_test, after lerna_build, 6s\n\n\tsection FooCore\n\tskipped: 0\n\n  section FooApp1\n\tskipped: 0\n\n  section FooApp2\n\tskipped: 0\n\n  section BarCore\n\tprepare: bc_prepare, after bt_prepare, 10s\n\tbuild: crit, bc_build, after bt_build, 2s\n\ttest: crit, bc_test, after lerna_build, 2s\n\n  section BarPage *\n\tprepare: bp_prepare, after bc_prepare, 10s\n\tbuild: bp_build, after bc_build, 25s\n\ttest: bp_test, after lerna_build, 12s\n",mermaid_382ee186:"gantt\n\ttitle Level 4: Pipelining\n\tdateFormat  s\n  axisFormat  %S\n\n  section Lerna\n\tLevel 1: 0, 105s\n\tLevel 2: 0, 91s\n\tLevel 3: 0, 79s\n  prepare: active, lerna_prepare, 0, 30s\n\tbuild  : active, lerna_build, 10, 45s\n  test  : active, lerna_test, 20, 47s\n\n\tsection BuildTool\n\tprepare: bt_prepare, 0, 10s\n\tbuild  : bt_build, after bt_prepare, 10s\n\ttest   : bt_test, after bt_build, 6s\n\n\tsection FooCore\n\tskipped: 0\n\n  section FooApp1\n\tskipped: 0\n\n  section FooApp2\n\tskipped: 0\n\n  section BarCore\n\tprepare: bc_prepare, after bt_prepare, 10s\n\tbuild: bc_build, after bt_build, 2s\n\ttest: bc_test, after bc_build, 2s\n\n  section BarPage *\n\tprepare: bp_prepare, after bc_prepare, 10s\n\tbuild: bp_build, after bp_prepare, 25s\n\ttest: bp_test, after bp_build, 12s\n"}},i=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("So how does "),a("code",[e._v("lage")]),e._v(" make builds faster? To fully appreciate how "),a("code",[e._v("lage")]),e._v(" gives you the best build performance compared to other monorepo task runners, take a look at this example. Here we have a repo with this dependency graph:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_1a96284d",graph:e.$dataBlock.mermaid_1a96284d}}),a("h2",{attrs:{id:"level-1-typical-lerna-or-workspace-runners"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#level-1-typical-lerna-or-workspace-runners"}},[e._v("#")]),e._v(" Level 1: Typical Lerna or Workspace Runners")]),e._v(" "),a("p",[e._v("First, let's take a look at the typical workspace runners. "),a("code",[e._v("Lerna")]),e._v(", "),a("code",[e._v("pnpm recursive")]),e._v(", "),a("code",[e._v("rush")]),e._v(" and "),a("code",[e._v("wsrun")]),e._v(' all will run one task at a time. This creates a sort of "build phase" effect where '),a("code",[e._v("test")]),e._v(" scripts are not allowed to run until "),a("code",[e._v("build")]),e._v(".")]),e._v(" "),a("div",{staticStyle:{width:"960px",position:"relative"},attrs:{markdown:""}},[a("Mermaid",{attrs:{id:"mermaid_382ee146",graph:e.$dataBlock.mermaid_382ee146}})],1),e._v(" "),a("h2",{attrs:{id:"level-2-scoping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#level-2-scoping"}},[e._v("#")]),e._v(" Level 2: Scoping")]),e._v(" "),a("p",[e._v('One of the first way to speeding up build jobs is to use "scoping". Usually a change only affect a subset of the graph. We can get rid of the builds of '),a("code",[e._v("FooCore")]),e._v(", "),a("code",[e._v("FooApp1")]),e._v(" and "),a("code",[e._v("FooApp2")]),e._v(" if the only changes are inside "),a("code",[e._v("BarCore")]),e._v(". However, we'll note that "),a("code",[e._v("BarPage")]),e._v(" is still affected, resulting in this.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee14e",graph:e.$dataBlock.mermaid_382ee14e}}),a("h2",{attrs:{id:"level-3-caching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#level-3-caching"}},[e._v("#")]),e._v(" Level 3. Caching")]),e._v(" "),a("p",[e._v("To further improve build times, we can take advantage of build caches. If we had previously built certain packages, we should be able to speed up the build with a cache. Here, the "),a("code",[e._v("BarCore")]),e._v(" packages have already been built and tested, and so")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee16a",graph:e.$dataBlock.mermaid_382ee16a}}),a("h2",{attrs:{id:"level-4-pipelining"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#level-4-pipelining"}},[e._v("#")]),e._v(" Level 4. Pipelining")]),e._v(" "),a("p",[e._v("Finally, the last thing we can to speed things up is to break down the wall between build phases from the task runner. In "),a("code",[e._v("lage")]),e._v(", we define the relationship between scripts in the "),a("code",[e._v("pipeline")]),e._v(" configuration.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee186",graph:e.$dataBlock.mermaid_382ee186}})],1)}),[],!1,null,null,null);"function"==typeof n&&n(i);t.default=i.exports}}]);